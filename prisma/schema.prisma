generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Stack {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  icon        String
  color       String
  description String
  url         String?
  order       Int?      @default(0)
  projectIDs  String[]  @db.ObjectId
  projects    Project[] @relation(fields: [projectIDs], references: [id])

  @@map("stacks")
}

model Social {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  icon     String
  color    String
  username String?
  url      String
  order    Int?    @default(0)

  @@map("socials")
}

model Image {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  order   Int?   @default(0)
  mediaId String @db.ObjectId
  media   Media  @relation(fields: [mediaId], references: [id])

  @@map("images")
}

model Media {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  mimeType     String
  alt          String?
  ProjectMedia Project[]    @relation("ProjectMedia")
  ProjectLogo  Project[]    @relation("ProjectLogo")
  Image        Image[]
  User         User[]
  Experience   Experience[]
  Education    Education[]
  Blog         Blog[]

  @@map("media")
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  version                 Int       @default(0) @map("__v")
  firstName               String
  lastName                String
  email                   String    @unique
  role                    String
  salt                    String
  hash                    String
  loginAttempts           Int       @default(0)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  bio                     String
  title                   String
  location                String
  isAvailable             Boolean
  mediaId                 String    @db.ObjectId
  media                   Media     @relation(fields: [mediaId], references: [id])
  lockUntil               DateTime?
  resetPasswordExpiration DateTime?
  resetPasswordToken      String?
  @@map("users")
}

model Skill {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  @@map("skills")
}

model Experience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  title       String
  location    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  mediaId     String    @db.ObjectId
  logo        Media     @relation(fields: [mediaId], references: [id])

  @@map("experiences")
}

model Education {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  department  String
  location    String
  startDate   DateTime
  endDate     DateTime
  description String?
  mediaId     String   @db.ObjectId
  logo        Media    @relation(fields: [mediaId], references: [id])

  @@map("educations")
}

model Project {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  slug              String          @unique
  content           Json?
  sourceUrl         String?
  previewUrl        String?
  order             Int?            @default(0)
  projectCategoryId String          @map("projectCategoryId") @db.ObjectId
  projectCategory   ProjectCategory @relation(fields: [projectCategoryId], references: [id])
  mediaId           String          @db.ObjectId
  media             Media           @relation("ProjectMedia", fields: [mediaId], references: [id])
  stackIds          String[]        @db.ObjectId
  stacks            Stack[]         @relation(fields: [stackIds], references: [id])
  logoId            String?         @db.ObjectId
  logo              Media?          @relation("ProjectLogo", fields: [logoId], references: [id])

  @@index([projectCategoryId])
  @@map("projects")
}

model ProjectCategory {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  project Project[]

  @@map("projectCategories")
}

model Blog {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  date           DateTime
  slug           String       @unique
  content        Json
  blogCategoryId String       @map("blogCategoryId") @db.ObjectId
  blogCategory   BlogCategory @relation(fields: [blogCategoryId], references: [id])
  mediaId        String       @db.ObjectId
  media          Media        @relation(fields: [mediaId], references: [id])

  @@index([blogCategoryId])
  @@map("blogs")
}

model BlogCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  blog Blog[]

  @@map("blogCategories")
}
